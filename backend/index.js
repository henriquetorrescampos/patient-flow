import "dotenv/config";

import express from "express";
import cors from "cors";
import api from "./routes/indexRoutes.js"; // Imports your main router

const app = express();

// --- ConfiguraÃ§Ã£o de CORS para ProduÃ§Ã£o (Vercel e Render) ---

// 1. Defina o(s) domÃ­nio(s) permitido(s)
// Use o domÃ­nio principal do seu projeto no Vercel.
// O domÃ­nio foi inferido da sua imagem: patient-flow-git-main-henriquetcampos-projects.vercel.app
// Ã‰ recomendÃ¡vel usar uma variÃ¡vel de ambiente, mas para o deploy inicial, podemos fixar.

const allowedOrigins = [
  // DomÃ­nio de ProduÃ§Ã£o do Vercel
  "https://patient-flow-git-main-henriquetcampos-projects.vercel.app",
  // DomÃ­nio de PR/Preview do Vercel (opcional, mas recomendado)
  "https://patient-flow-qvezbxcikm-henriquetcampos-projects.vercel.app",
  // Se o Vercel tiver um domÃ­nio principal sem sufixo, adicione aqui (ex: patient-flow.vercel.app)
];

const corsOptions = {
  // A funÃ§Ã£o de origem verifica se a requisiÃ§Ã£o Ã© permitida
  origin: (origin, callback) => {
    // Permite se nÃ£o houver 'origin' (ex: requisiÃ§Ãµes feitas pelo Backend para o prÃ³prio Backend, ou ferramentas como Postman)
    if (!origin) return callback(null, true);

    // Permite se o domÃ­nio estiver na lista de permitidos
    if (allowedOrigins.indexOf(origin) !== -1) {
      callback(null, true);
    } else {
      // Rejeita requisiÃ§Ãµes de outros domÃ­nios
      callback(new Error("Not allowed by CORS"));
    }
  },
};

// --- Middleware ---
// Aplica a nova configuraÃ§Ã£o de CORS
app.use(cors(corsOptions));

app.use(express.json()); // Parse JSON request bodies

// --- Routes ---
// Connects your router file
app.use("/api", api);

// --- Server Startup ---
const PORT = process.env.PORT || 8080;
app.listen(PORT, () => {
  console.log(`ðŸš€ Server running on http://localhost:${PORT}`);
});
